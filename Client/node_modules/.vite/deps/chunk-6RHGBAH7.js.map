{
  "version": 3,
  "sources": ["../../react-bootstrap/esm/ElementChildren.js"],
  "sourcesContent": ["import * as React from 'react';\r\n\r\n/**\r\n * Iterates through children that are typically specified as `props.children`,\r\n * but only maps over children that are \"valid elements\".\r\n *\r\n * The mapFunction provided index will be normalised to the components mapped,\r\n * so an invalid component would not increase the index.\r\n *\r\n */\r\nfunction map(children, func) {\r\n  let index = 0;\r\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\r\n}\r\n\r\n/**\r\n * Iterates through children that are \"valid elements\".\r\n *\r\n * The provided forEachFunc(child, index) will be called for each\r\n * leaf child with the index reflecting the position relative to \"valid components\".\r\n */\r\nfunction forEach(children, func) {\r\n  let index = 0;\r\n  React.Children.forEach(children, child => {\r\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\r\n  });\r\n}\r\n\r\n/**\r\n * Finds whether a component's `children` prop includes a React element of the\r\n * specified type.\r\n */\r\nfunction hasChildOfType(children, type) {\r\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\r\n}\r\nexport { map, forEach, hasChildOfType };"],
  "mappings": ";;;;;;;;AAAA,YAAuB;AAUvB,SAAS,IAAI,UAAU,MAAM;AAC3B,MAAI,QAAQ;AACZ,SAAa,eAAS,IAAI,UAAU,WAA4B,qBAAe,KAAK,IAAI,KAAK,OAAO,OAAO,IAAI,KAAK;AACtH;AAQA,SAAS,QAAQ,UAAU,MAAM;AAC/B,MAAI,QAAQ;AACZ,EAAM,eAAS,QAAQ,UAAU,WAAS;AACxC,QAAwB,qBAAe,KAAK;AAAG,WAAK,OAAO,OAAO;AAAA,EACpE,CAAC;AACH;AAMA,SAAS,eAAe,UAAU,MAAM;AACtC,SAAa,eAAS,QAAQ,QAAQ,EAAE,KAAK,WAA4B,qBAAe,KAAK,KAAK,MAAM,SAAS,IAAI;AACvH;",
  "names": []
}
